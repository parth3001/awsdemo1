# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
     
version: 2
jobs:
  #"sandbox-build":
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      # - image: arn:aws:ecr:us-east-1:916853075824:repository/java/oracle/serverjre 
      #- image: 916853075824.dkr.ecr.us-east-1.amazonaws.com/java/oracle/serverjre
      #- image: docker-aws-cli
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
   
    steps:
      - checkout
      - run: ls -alt
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      
      - run: gradle sonarqube dependencies
      - run: ls -alt
 # Lambda Updates
      - run:
          name: Env Variables
          command: |
            echo $AWS_ACCESS_KEY_ID_SANDBOX


      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
        
      # run tests!
      #- run: gradle test
      - run: 
          name: Gradle Tests and Build
          command: |
               gradle clean
               gradle build
               ls -alt
               ls -alt ./build/libs
      
      #- run: aws -version
      #- run: pip install awscli --upgrade --user
      #- run: which aws
      # install python and awscli
      - run: 
          name: Install AWS CLI
          command: |
               sudo apt-get update && sudo apt-get install -qq -y python-pip libpython-dev
               curl -O https://bootstrap.pypa.io/get-pip.py && sudo python get-pip.py
               sudo pip install -q awscli --upgrade
               aws --version
               cp ./build/libs/repo-0.0.1-SNAPSHOT.war ./build/libs/repo-0.0.1-SNAPSHOT.war_$CIRCLE_BUILD_NUM.zip
               
      - run: 
          name: Upload to s3
          command: aws s3 cp ./build/libs/repo-0.0.1-SNAPSHOT.war_$CIRCLE_BUILD_NUM.zip s3://phawsdemo/

      - run: pwd
      - run: ls -alt ./build/libs
      
      - store_artifacts:
          path: ./build/libs/repo-0.0.1-SNAPSHOT.war
          destination: artifact-file
      
      #- run: which aws
      #- run: ls -alt ./build/libs
      #- run: ls
      #- run: 
          #name: s3
          #command: aws s3 cp ./build/libs/repo-0.0.1-SNAPSHOT.war.zip s3://varadbookit/
      #- run: aws sts assume-role --role-arn arn:aws:iam::769230076517:role/RoleForCircleCIDevOps --role-session-name test    
      #- run: aws sts assume-role --role-arn arn:aws:iam::769230076517:role/RoleForCicleCIDevOps --role-session-name foo 
      #- run: aws lambda update-function-code --function-name Hello --s3-bucket s3.us-east-2.amazonaws.com/varadbookit --s3-key Hello.zip    
      #- run: aws lambda update-function-code --function-name arn:aws:lambda:us-east-2:657766436554:function:Hello --region us-east-2 --s3-bucket varadbookit --s3-key Hello.zip  
      #- run: aws lambda update-function-code --function-name arn:aws:lambda:us-east-1:769230076517:function:test --region us-east-1 --s3-bucket devops-non-prod-s3-bucket --s3-key test.zip  
      #- run: aws lambda update-function-code --function-name test --region us-east-1 --s3-bucket devops-non-prod-s3-bucket --s3-key test.zip  
      #- run: aws lambda update-alias --function-name arn:aws:lambda:us-east-2:657766436554:function:Hello --name varadh --region us-east-2 --s3-bucket varadbookit --s3-key Hello.zip  
      #- run: aws lambda publish-version --function-name arn:aws:lambda:us-east-1:769230076517:function:test$LATEST --region us-east-1 
      
      # Lambda Updates
      #- run:
      #    name: Lambda Updates
      #    command: |
      #      mkdir ~/.aws
      #      cp credentials ~/.aws
      #      #cp config ~/.aws
      #      echo $AWS_ACCESS_KEY_ID_SANDBOX
      #      #aws configure --profile default
      #      export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_SANDBOX
      #      export aws_secret_access_key=$AWS_SECRET_KEY_SANDBOX
      #      aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_SANDBOX
      #      aws configure set aws_secret_access_key $AWS_SECRET_KEY_SANDBOX
      #      export aws_region=us-east-1
      #      export aws_profile=sandbox
      #      export aws_role_arn=arn:aws:iam::769230076517:role/RoleForCicleCIDevOps
      #      echo $aws_access_key_id
      #      echo $aws_secret_access_key
      #      aws configure list
      #      #aws sts assume-role --role-arn arn:aws:iam::769230076517:role/RoleForCicleCIDevOps --role-session-name foo 
      #      aws lambda update-function-code --function-name test --region us-east-1 --s3-bucket devops-non-prod-s3-bucket --s3-key test.zip --profile default
      #      aws lambda publish-version --function-name test$LATEST --region us-east-1 --profile default > publish_version.json
      #      #aws lambda update-alias --function-name test --name testalias --function-version 3 --profile default
      #      aws lambda get-alias --function-name test --name testalias --region us-east-1 --profile default > current_version.json
      #      jq -r '.Version' publish_version.json > new_version.json
      #      #echo [\{\"version\": 0.0,\"Resources\": [\{\"myLambdaFunction\": \{\"Type\": \"AWS::Lambda::Function\",\"Properties\": \{\"Name\": \"myLambdaFunction\",\"Alias\": \"myLambdaFunctionAlias\",\"CurrentVersion\": \"old\",\"TargetVersion\": \"new\"\}\}\}]\}] > lambda.json
      #      sed -i 's/new/'$(cat new_version.json)'/g' lambda.json
      #      jq -r '.FunctionVersion' current_version.json > new_current_version.json
      #      sed -i 's/old/'$(cat new_current_version.json)'/g' lambda.json
      #      echo $(cat lambda.json)
      #      date > date
      #      aws deploy list-applications --region us-east-1 --profile default
      #      aws deploy list-deployment-groups --application-name test --profile default
      #      aws deploy get-application --application-name test --region us-east-1 --profile default
      #      # upload build artefact to S3
      #      aws s3 cp lambda.json s3://devops-non-prod-s3-bucket/
      #      echo "Creating Deployment"
      #      aws deploy create-deployment --application-name test --deployment-config-name CodeDeployDefault.LambdaAllAtOnce --deployment-group-name dev --s3-location bucket=devops-non-prod-s3-bucket,bundleType=JSON,key=lambda.json --description "Deployed via CircleCI on $(cat date)" --region us-east-1 --profile default > deploy.json                                                                                                                                                       
      #      jq -r '.deploymentId' deploy.json > newdeploy.json
      #      sed -i '/^null/d' newdeploy.json
            
      #- run:
      #    name: Deployment Status
      #    command: |
      #      aws deploy wait deployment-successful --deployment-id $(cat newdeploy.json) --region us-east-1 --profile default
